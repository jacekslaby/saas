package com.j9soft.saas.alarms.testdata;

import com.google.gson.Gson;
import com.j9soft.saas.alarms.model.Definitions;
import com.j9soft.saas.alarms.model.ResyncAllEndSubdomainRequestV1;
import org.openapitools.client.model.ResyncAllEnd;

import static com.j9soft.saas.alarms.testdata.TestConstants.ADAPTER_NAME;
import static com.j9soft.saas.alarms.testdata.TestConstants.DOMAIN;

public class TestResyncAllEndSubdomainRequest extends TestRequestData {

    private String requestJson;
    private ResyncAllEndSubdomainRequestV1 request;

    private TestResyncAllEndSubdomainRequest() {}

    @Override
    public String getRequestJson() {
        return requestJson;
    }

    public ResyncAllEndSubdomainRequestV1 getRequestObject() {
        return request;
    }

    public static TestResyncAllEndSubdomainRequest build() {
        TestResyncAllEndSubdomainRequest result = new TestResyncAllEndSubdomainRequest();

        // Let's prepare our test input request in JSON.
        ResyncAllEnd openApiRequest = new ResyncAllEnd()
                .requestType(ResyncAllEnd.RequestTypeEnum.RESYNCALLEND);

        // Note: Our helper model classes are generated by openapi-generator-maven-plugin
        //  and thus they require Gson to be properly serialized to JSON.
        //  (btw: with com.fasterxml.jackson.databind.ObjectMapper there were camel names in JSON,
        //    i.e. as field names e.g. "requestType" instead of 'request_type'.)
        Gson gson = new Gson();
        result.requestJson = gson.toJson(openApiRequest);

        // Let's prepare the expected request. (i.e. expected to be generated and saved in Dao)
        result.request = ResyncAllEndSubdomainRequestV1.newBuilder()
                .setUuid("foo")  // we expect it to be overwritten  (it is required in DAO schema so we must provide it here)
                .setEntryDate(1)  // we expect it to be overwritten  (it is required in DAO schema so we must provide it here)
                .setEntityTypeName(Definitions.ALARM_ENTITY_TYPE_NAME)
                .setEntityDomainName(DOMAIN)
                .setEntitySubdomainName(ADAPTER_NAME)
                .setEventDate(Long.valueOf(1))  // we expect it to be overwritten
                .setLineageStartDate(null)
                .build();

        return result;
    }
}
