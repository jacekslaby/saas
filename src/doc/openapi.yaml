openapi: 3.0.0
info:
  description: |
    This is Command API v.1 for Source Alarms repository. ('C' from 'CQRS')
    
    It accepts requests modyfining Alarms stored in Source Alarms repository.
    
    A request may concern a single Alarm (e.g. `CreateAlarmRequest`)
     or all Alarms from an Adapter (e.g. `DeleteAllAlarmsRequest`).
    Stored Alarms are partitioned by tuple (DomainName, AdapterName).
    Within a partition (i.e. among alarms from the same Adapter)
     an Alarm is uniquely identified by its property `notification_identifier`.
     
    Every request has an optional `uuid` which may be used in Query API of Source Alarms repository.
    Every request concerning a single Alarm must provide property `notification_identifier`.
    
    The execution order of requests is guaranteed only
    within a partition (i.e. among alarms for the same Adapter)
    and only for POSTs not executing in parallel. 
    (I.e. in order to assure the sequence of your requests 
    you cannot in parallel POST another request (for the same adapter)
    until the previous one returned a response.)
    (Note: requests for different adapters can be executed in parallel.)
    
    Clients using this API must be ready for backward compatible changes in API like
     adding a not required property, adding a new request type, adding a new path, 
     adding a new HTTP method, adding a new enum value.
     
    Note: including changes in order to workaround swagger-codegen bugs:
    - 'discriminator' is not properly supported by codegen - https://github.com/OAI/OpenAPI-Specification/issues/1313
    - when serialized to JSON (by jackson) instances of model.AlarmDTO generated by codegen do not have properties due to 'extends HashMap' - https://stackoverflow.com/questions/47850441/openapi-swagger-codegen-additionnalproperties-extends-hashmap-playjackson-de
    (see also https://stackoverflow.com/questions/31320983/jackson-serialise-map-with-extra-fields )

  version: 1.0.0
  title: Command API of Source Alarms repository
servers:
  - url: http://192.168.99.100:8084
  - url: http://192.168.99.100:8083
  - url: https://sar.j9soft.com/v1
  
paths:
  /v1/domains/{domainName}/adapters/{adapterName}/request:
    post:
      summary: Add a new request to the repository
      operationId: addRequest
      parameters:
        - $ref: '#/components/parameters/domainName'
        - $ref: '#/components/parameters/adapterName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
            example:
              request_type: CreateAlarmRequest
              request_content:
                notification_identifier: "eric2g:south:34566"
                event_time: "2018-10-19T13:44:56.334+02:00"
                perceived_severity: 1
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestCreatedResponse'
        '403':
          description: |
            Provided access token (in Header 'Authentication: Bearer ...') 
            does not allow to modify Alarms in this Domain and/or Adapter.
        '500':
          description: |
            Unexpected error. The request could not have been created. Please re-try later.

  /v1/domains/{domainName}/adapters/{adapterName}/request/createWithList:
    post:
      summary: Add new requests to the repository
      operationId: addRequests
      parameters:
        - $ref: '#/components/parameters/domainName'
        - $ref: '#/components/parameters/adapterName'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestsList'
            example:
              - request_type: ResyncAllAlarmsStartRequest
                request_content: {}
              - request_type: CreateAlarmRequest
                request_content:
                  notification_identifier: "eric2g:south:34566"
              - request_type: ResyncAllAlarmsEndRequest
                request_content: {}
      responses:
        '200':
          description: |
            Successful operation. Nested array of status codes has 200 (i.e. OK) in every item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiStatusResponse'
        '207':
          description: |
            Partially successful operation. Nested array of status codes (200 or 500) indicates which request was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiStatusResponse'
        '403':
          description: |
            Provided access token (in Header 'Authentication: Bearer ...') 
            does not allow to modify Alarms in this Domain and/or Adapter.
        '500':
          description: |
            Unexpected error. None of the requests could not have been created. Please re-try later.

components:
  schemas:
    RequestsList:
      type: array
      items:
        $ref: '#/components/schemas/Request'
    Request:
      type: object
      properties:
        request_type:
          type: string
          enum: ["CreateAlarmRequest", "DeleteAlarmRequest", "PatchAlarmRequest", "PutAlarmRequest", "ResyncAllAlarmsEndRequest", "ResyncAllAlarmsStartRequest"]
          description: |
            Value of this property is a kind of a discriminator,
            i.e. defines what is included in property `request_content`.
            For example if `request_type=ResyncAllAlarmsEndRequest` then `request_content` must contain 
             an object of `ResyncAllAlarmsEndRequest` schema.
        request_content:
          oneOf:
            - $ref: '#/components/schemas/CreateAlarmRequest'
            - $ref: '#/components/schemas/DeleteAlarmRequest'
            - $ref: '#/components/schemas/PatchAlarmRequest'
            - $ref: '#/components/schemas/PutAlarmRequest'
            - $ref: '#/components/schemas/ResyncAllAlarmsEndRequest'
            - $ref: '#/components/schemas/ResyncAllAlarmsStartRequest'
      required: 
        - request_type
        - request_content
        
    ResyncAllAlarmsEndRequest:
      description: |
        `ResyncAllAlarmsEndRequest` indicates end of resynchronization.
        All not delivered alarms are deleted after this request is processed.
        In order to survive during a resynchronization 
         an alarm needs to have at least one non-DeleteAlarmRequest request 
         between `ResyncAllAlarmsStartRequest` and `ResyncAllAlarmsEndRequest`.
        See also `ResyncAllAlarmsStartRequest`.
    ResyncAllAlarmsStartRequest:
      description: |
        `ResyncAllAlarmsStartRequest` initiates resynchronization. 
        It is followed by zero or more alarm requests and finally by `RequestAllEnd` request.

    CreateAlarmRequest:
      description: |
        `CreateAlarmRequest` is ignored if Alarm with such notification_identifier 
        already exists. See also `PutAlarmRequest` and `PatchAlarmRequest`.
      type: object
      properties:
        alarm_dto:   # Defining this property (and its schema) allows us to re-use the same AlarmDTO schema
                     #  instead of copying all its properties to CreateAlarmRequest, PatchAlarmRequest, etc.
          $ref: '#/components/schemas/AlarmDTO'
      required: 
        - alarm_dto
    DeleteAlarmRequest:
      description: |
        `DeleteAlarmRequest` is ignored if Alarm with such notification_identifier 
        does not exists. The only used property is `alarm_dto.notification_identifier`.
      type: object
      properties:
        alarm_dto:
          $ref: '#/components/schemas/DeletedAlarmDTO'
      required: 
        - alarm_dto
    PatchAlarmRequest:
      description: |
        `PatchAlarmRequest` patches Alarm with such notification_identifier overwriting 
        only the provided Alarm properties, i.e. not changing other ones.
        See also `CreateAlarmRequest` and `PutAlarmRequest`.
      type: object
      properties:
        alarm_dto:
          $ref: '#/components/schemas/AlarmDTO'
      required: 
        - alarm_dto
    PutAlarmRequest:
      description: |
        `PutAlarmRequest` puts Alarm with such notification_identifier overwriting 
        it if it already exists. See also `CreateAlarmRequest` and `PatchAlarmRequest`.
      type: object
      properties:
        alarm_dto:
          $ref: '#/components/schemas/AlarmDTO'
      required: 
        - alarm_dto
        
    AlarmDTO:
      description: AlarmDTO is used to transport Alarm properties from a client to the SA repository.
      type: object
      properties:
        notification_identifier:
          description: Unique identifier of the alarm within Domain.
          type: string
          example: "eric2g:south:34566"
        event_time:
          description: Instant when this alarm was created/updated. (i.e. according to wall time)
          type: string
          format: dateTime
          example:   # "See https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#date.and.time.format.examples"
            "2018-10-19T13:44:56.334+02:00"
        perceived_severity:
          type: integer
          example: 1
        additional_properties:
          $ref: '#/components/schemas/AlarmDTOAdditionalProperties'
      required: 
        - notification_identifier
    AlarmDTOAdditionalProperties:
      description: AlarmDTOAdditionalProperties is used to transport arbitrary Alarm properties from a client to the SA repository.
      type: object
      additionalProperties:    # we allow clients to add properties, i.e. it is a free-form object (arbitrary property/value pairs)
        type: string     # we will treat them as strings
        example:
          additional_text: "Detailed information"
          managed_object_instance: "BTS:333"
          
    DeletedAlarmDTO:
      description: | 
        DeletedAlarmDTO is used to transport Alarm properties from a client to the SA repository
         for a DeleteAlarmRequest.
      type: object
      properties:
        notification_identifier:
          type: string
          example: "eric2g:south:34566"
        event_time:
          description: Instant when this alarm was removed. (i.e. according to wall time)
          type: string
          format: dateTime
          example:   # "See https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#date.and.time.format.examples"
            "2018-10-19T13:44:56.334+02:00"
      required: 
        - notification_identifier
        
    RequestCreatedResponse:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426655440000"
          description: |
            It contains UUID of the created request.
    MultiStatusResponse:
      type: array
      items:
        $ref: '#/components/schemas/RequestCreationResult'
      example: 
        - status: 200
          uuid: "123e4567-e89b-12d3-a456-426655440000"
        - status: 200
          uuid: "223e4567-e89b-12d3-a456-426655440001"
        - status: 200
          uuid: "323e4567-e89b-12d3-a456-426655440002"
    RequestCreationResult:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          nullable: true
          example: "123e4567-e89b-12d3-a456-426655440000"
          description: |
            It contains UUID in case everything went OK, i.e. when the request was created.
            It is `null` in case when `status` property is '500'.
        status:
          type: string
          enum: [200, 500]
          example: "500"
          description: |
            500 means it was not possible to add this request. Please re-try later.
            200 means it was OK.
            
            
  parameters:
    domainName:
      name: domainName
      in: path
      schema:
        type: string
      required: true
      description: |
        The name of Domain where Adapter is located.
        Not allowed characters: / (slash) \ (backslash) , (comma)
      example: "all"
    adapterName:
      name: adapterName
      in: path
      schema:
        type: string
      required: true
      description: |
        The name of Adapter whose Alarms are concerned by the request.
        Not allowed characters: / (slash) \ (backslash) , (comma)
      example: "AdapterEricsson2g-south"
      
  securitySchemes:
    bearerAuth:            # Security scheme based on header "Authorization: Bearer <JWT token>".
      type: http
      scheme: bearer
      bearerFormat: JWT    # Token needs to contain two claims {domainName:foo,adapterName:bar}
                           # matching values of path parameters. 
                           # (btw: On non production environments: {domainName:all,adapterName:all})

# Apply the security globally to all operations
security:
  - bearerAuth: []